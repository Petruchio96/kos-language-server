{
    "version": "",
    "name": "Kerbal Operating System",
    "scopeName": "source.kos",
    "fileTypes": [
        "ks"
    ],
    "patterns": [{
        "include": "#statements"
    }],
    "repository": {
        "statements": {
            "patterns": [{
                    "include": "#string"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#control-statement"
                },
                {
                    "include": "#directive"
                },
                {
                    "include": "#declaration"
                }
            ]
        },
        "directive": {
            "patterns": [{
                "match": "(?i)(\\@)(lazyglobal)\\s+\\b(on|off)\\s*\\.",
                "captures": {
                    "1": {
                        "name": "keyword.operator.directive.kos"
                    },
                    "2": {
                        "name": "keyword.directive.lazyGlobal.kos"
                    },
                    "3": {
                        "name": "keyword.control.lazyGlobal.kos"
                    },
                    "4": {
                        "name": "punctuation.terminator.statement.kos"
                    }
                }
            }]
        },
        "declaration": {
            "patterns": [{
                    "include": "#function-declaration"
                },
                {
                    "include": "#parameter-declaration"
                },
                {
                    "include": "#lock-declaration"
                },
                {
                    "include": "#variable-declaration"
                },
                {
                    "include": "#instruction"
                }
            ]
        },
        "function-declaration": {
            "name": "meta.function.kos",
            "begin": "(?i)(?:(\\bdeclare)\\s+)?(?:\\b(local|global)\\s+)?\\b(function)\\s+([_[:alpha:]][_[:alnum:]]*)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.declaration.declare.kos"
                },
                "2": {
                    "name": "storage.modifier.scope.kos"
                },
                "3": {
                    "name": "storage.type.function.kos"
                },
                "4": {
                    "name": "meta.definition.function.kos entity.name.function.kos"
                }
            },
            "end": "(?<=\\})",
            "patterns": [{
                "include": "#block"
            }]
        },
        "parameter-declaration": {
            "name": "meta.declaration.parameter",
            "begin": "(?i)(?:(\\bdeclare)\\s+)?(?:\\b(local|global)\\s+)?\\b(parameter)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.declaration.declare.kos"
                },
                "2": {
                    "name": "storage.modifier.scope.kos"
                },
                "3": {
                    "name": "storage.type.parameter.kos"
                }
            },
            "end": "\\.",
            "patterns": [
                {
                    "include": "#comment"
                },
                {
                    "include": "#punctuation-comma"
                },
                {
                    "include": "#parameter-body"
                }
            ]
        },
        "parameter-body": {
            "begin": "(?i)\\b([_[:alpha:]][_[:alnum:]]*)(?:\\s+\\b(is|to)\\s+)?\\s*",
            "beginCaptures": {
                "1": {
                    "name": "variable.parameter.kos"
                },
                "2": {
                    "name": "keyword.assignment.assign.kos"
                }
            },
            "end": "(?=(\\,|\\.))",
            "patterns": [
                {
                    "include": "#comment"
                },    
                {
                    "include": "#expression"
                }
            ]
        },
        "lock-declaration": {
            "name": "meta.declaration.lock",
            "begin": "(?i)(?:(\\bdeclare)\\s+)?(?:\\b(local|global)\\s+)?(\\block)\\s+\\b([_[:alpha:]][_[:alnum:]]*)\\s+(\\bto)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.declaration.declare.kos"
                },
                "2": {
                    "name": "storage.modifier.scope.kos"
                },
                "3": {
                    "name": "storage.type.lock.kos"
                },
                "4": {
                    "name": "variable.other.kos"
                },
                "5": {
                    "name": "keyword.assignment.assign.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "0": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                "include": "#expression"
            }]
        },
        "variable-declaration": {
            "patterns": [{
                    "include": "#variable-declaration-declare"
                },
                {
                    "include": "#variable-declaration-scope"
                }
            ]
        },
        "variable-declaration-declare": {
            "name": "meta.declaration.variable",
            "begin": "(?i)\\b(declare)\\s+(?:\\b(local|global)\\s+)?\\b([_[:alpha:]][_[:alnum:]]*)\\s+\\b(is|to)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.declaration.declare.kos"
                },
                "2": {
                    "name": "storage.modifier.scope.kos"
                },
                "3": {
                    "name": "variable.other.kos"
                },
                "4": {
                    "name": "keyword.assignment.assign.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                "include": "#expression"
            }]
        },
        "variable-declaration-scope": {
            "name": "meta.declaration.variable",
            "begin": "(?i)\\b(local|global)\\s+\\b([_[:alpha:]][_[:alnum:]]*)\\s+\\b(to|is)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "storage.modifier.scope.kos"
                },
                "2": {
                    "name": "variable.other.kos"
                },
                "3": {
                    "name": "keyword.assignment.assign.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                "include": "#expression"
            }]
        },
        "block": {
            "name": "meta.block.kos",
            "begin": "\\{",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.block.kos"
                }
            },
            "end": "\\}",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.block.kos"
                }
            },
            "patterns": [{
                "include": "#statements"
            }]
        },
        "control-statement": {
            "patterns": [{
                    "name": "keyword.control.conditional.kos",
                    "match": "(?i)(?<![_[:alnum:]\\:])(else|if)(?![_[:alnum:]\\:])"
                },
                {
                    "name": "keyword.control.trigger.kos",
                    "match": "(?i)(?<![_[:alnum:]\\:])(when|then|on)(?![_[:alnum:]\\:])"
                },
                {
                    "match": "(?i)\\b(preserve)(\\.)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.trigger.kos"
                        },
                        "2": {
                            "name": "punctuation.terminator.statement.kos"
                        }
                    }
                },
                {
                    "match": "(?i)\\b(stage)(\\.)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.stage.kos"
                        },
                        "2": {
                            "name": "punctuation.terminator.statement.kos"
                        }
                    }
                },
                {
                    "name": "keyword.control.flow.kos",
                    "match": "(?i)(?<![_[:alnum:]\\:])(until)(?![_[:alnum:]\\:])"
                },
                {
                    "name": "keyword.control.loop.kos",
                    "match": "(?i)(?<![_[:alnum:]\\:])(for|in|from|step|do)(?![_[:alnum:]\\:])"
                },
                {
                    "match": "(?i)\\b(break)(\\.)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.loop.kos"
                        },
                        "2": {
                            "name": "punctuation.terminator.statement.kos"
                        }
                    }
                },
                {
                    "include": "#return-statement"
                },
                {
                    "include": "#toggle-statement"
                },
                {
                    "include": "#wait-statement"
                }
            ]
        },
        "return-statement": {
            "begin": "(?i)(?<![_[:alnum:]\\:])(return)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.flow.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                "include": "#expression"
            }]
        },
        "toggle-statement": {
            "begin": "(?<![_[:alnum:]\\:])(?i)(toggle)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.toggle.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                "include": "#suffix"
            }]
        },
        "wait-statement": {
            "begin": "(?i)(?<![_[:alnum:]\\:])(wait)\\s+(\\b(until)\\s)?",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.wait.kos"
                },
                "2": {
                    "name": "keyword.control.until.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                "include": "#expression"
            }]
        },
        "instruction": {
            "patterns": [{
                    "include": "#set-instruction"
                },
                {
                    "include": "#unassign-instruction"
                },
                {
                    "include": "#print-instruction"
                },
                {
                    "include": "#copy-instruction"
                },
                {
                    "include": "#rename-instruction"
                },
                {
                    "include": "#switch-instruction"
                },
                {
                    "include": "#delete-instruction"
                },
                {
                    "include": "#compile-instruction"
                },
                {
                    "include": "#log-instruction"
                },
                {
                    "include": "#run-instruction"
                },
                {
                    "include": "#run-path-instruction"
                },
                {
                    "include": "#run-path-once-instruction"
                },
                {
                    "include": "#list-instruction"
                },
                {
                    "include": "#command-instructions"
                },
                {
                    "include": "#node-instructions"
                },
                {
                    "include": "#block"
                },
                {
                    "include": "#expression"
                },
                {
                    "include": "#punctuation-period"
                }
            ]
        },
        "set-instruction": {
            "begin": "(?i)\\b(set)(?![_[:alnum:]\\:])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.assignment.set.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                    "include": "#to-operator"
                },
                {
                    "include": "#expression"
                }
            ]
        },
        "unassign-instruction": {
            "name": "meta.unassignment.kos",
            "begin": "(?i)\\b(unset|unlock)(?![_[:alnum:]\\:])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.assignment.unassign.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                    "name": "keyword.other.unassign.all.kos",
                    "matches": "(?i)\\ball"
                },
                {
                    "includes": "#identifier"
                }
            ]
        },
        "print-instruction": {
            "name": "meta.print.kos",
            "begin": "(?i)\\b(print)(?![_[:alnum:]\\:])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.print.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                    "include": "#print-at-expression"
                },
                {
                    "include": "#expression"
                }
            ]
        },
        "print-at-expression": {
            "begin": "(?i)\\b(at)\\s*\\(",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.at.kos"
                }
            },
            "end": "\\)",
            "patterns": [{
                    "include": "#punctuation-comma"
                },
                {
                    "include": "#expression"
                }
            ]
        },
        "copy-instruction": {
            "name": "meta.copy.kos",
            "begin": "(?i)\\b(copy)(?![_[:alnum:]\\:])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.copy.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                    "include": "#to-from-operators"
                },
                {
                    "include": "#expression"
                }
            ]
        },
        "rename-instruction": {
            "name": "meta.rename.kos",
            "begin": "(?i)\\b(rename)\\s+\\b(file|volume)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.rename.kos"
                },
                "2": {
                    "name": "keyword.other.fileVolume.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                    "include": "#expression"
                },
                {
                    "include": "#to-operator"
                }
            ]
        },
        "switch-instruction": {
            "name": "meta.switch.kos",
            "begin": "(?i)\\b(switch)\\s+\\b(to)(?![_[:alnum:]\\:])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.switch.kos"
                },
                "2": {
                    "name": "keyword.command.switchTo.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                "include": "#expression"
            }]
        },
        "log-instruction": {
            "begin": "(?i)\\b(log)(?![_[:alnum:]\\:])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.log.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                    "include": "#to-operator"
                },
                {
                    "include": "#expression"
                }
            ]
        },
        "delete-instruction": {
            "name": "meta.delete.kos",
            "begin": "(?i)\\b(delete)(?![_[:alnum:]\\:])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.delete.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                    "include": "from-operator"
                },
                {
                    "include": "#expression"
                }
            ]
        },
        "compile-instruction": {
            "name": "meta.compile.kos",
            "begin": "(?i)\\b(compile)(?![_[:alnum:]\\:])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.compile.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                    "include": "#to-operator"
                },
                {
                    "include": "#expression"
                }
            ]
        },
        "run-instruction": {
            "name": "meta.run.kos",
            "begin": "(?i)\\b(run)\\s+(?:\\b(once)\\s+)?",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.run.kos"
                },
                "2": {
                    "name": "keyword.command.once.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                    "include": "#call"
                },
                {
                    "include": "#run-on-instruction"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#file-identiifer"
                }
            ]
        },
        "run-on-instruction": {
            "begin": "(?i)\\b(on)(?![_[:alnum:]\\:])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.on.kos"
                }
            },
            "end": "(?=(\\,|\\.))",
            "patterns": [{
                "include": "#expression"
            }]
        },
        "run-path-instruction": {
            "name": "meta.runpath.kos",
            "begin": "(?i)\\b(runpath)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.runpath.kos"
                }
            },
            "end": "\\.",
            "endCapture": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                "include": "#call"
            }]
        },
        "run-once-path-instruction": {
            "name": "meta.runoncepath.kos",
            "begin": "(?i)\\b(runoncepath)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.runpath.kos"
                }
            },
            "end": "\\.",
            "endCapture": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                "include": "#call"
            }]
        },
        "list-instruction": {
            "name": "meta.list.kos",
            "match": "(?i)\\b(list)(?:\\s+\\b([_[:alpha:]][_[:alnum:]]*))?(?:\\s+\\b(in)\\s+\\b([_[:alpha:]][_[:alnum:]]*))?(\\.)",
            "captures": {
                "1": {
                    "name": "keyword.command.list.kos"
                },
                "2": {
                    "name": "variable.other.kos"
                },
                "3": {
                    "name": "keyword.command.in.kos"
                },
                "4": {
                    "name": "variable.other.kos"
                },
                "5": {
                    "name": "punctuation.terminator.statement.kos"
                }
            }
        },
        "command-instructions": {
            "patterns": [{
                    "match": "(?i)\\b(clearscreen)(\\.)",
                    "captures": {
                        "1": {
                            "name": "keyword.command.clearscreen.kos"
                        },
                        "2": {
                            "name": "punctuation.terminator.statement.kos"
                        }
                    }
                },
                {
                    "match": "(?i)\\b(reboot)(\\.)",
                    "captures": {
                        "1": {
                            "name": "keyword.command.reboot.kos"
                        },
                        "2": {
                            "name": "punctuation.terminator.statement.kos"
                        }
                    }
                },
                {
                    "match": "(?i)\\b(shutdown)(\\.)",
                    "captures": {
                        "1": {
                            "name": "keyword.command.shutdown.kos"
                        },
                        "2": {
                            "name": "punctuation.terminator.statement.kos"
                        }
                    }
                }
            ]
        },
        "node-instructions": {
            "patterns": [
                {
                    "include": "#node-add"
                },
                {
                    "include": "#node-remove"
                },
                {
                    "include": "#node-edit"
                }
            ]
        },
        "node-add": {
            "name": "meta.node.add.kos",
            "begin": "(?i)\\b(add)(?![_[:alnum:]\\:])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.add.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                    "include": "#expression"
                }
            ]
        },
        "node-edit": {
            "name": "meta.node.edit.kos",
            "begin": "(?i)\\b(edit)(?![_[:alnum:]\\:])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.edit.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                    "include": "#expression"
                }
            ]
        },
        "node-remove": {
            "name": "meta.node.remove.kos",
            "begin": "(?i)\\b(remove)(?![_[:alnum:]\\:])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.add.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [{
                    "include": "#expression"
                }
            ]
        },
        "expression": {
            "patterns": [{
                    "include": "#expressions-without-identifiers"
                },
                {
                    "include": "#suffix"
                },
                {
                    "include": "#white-space"
                }
            ]
        },
        "expressions-without-identifiers": {
            "patterns": [{
                    "include": "#comment"
                },
                {
                    "include": "#string"
                },
                {
                    "include": "#block"
                },
                {
                    "include": "#expression-operators"
                }
            ]
        },
        "expression-operators": {
            "patterns": [{
                    "name": "keyword.operator.expression.or.kos",
                    "match": "(or)(?![_[:alnum:]\\:])"
                },
                {
                    "name": "keyword.operator.expression.and.kos",
                    "match": "(and)(?![_[:alnum:]\\:])"
                },
                {
                    "name": "keyword.operator.expression.not.kos",
                    "match": "(not)(?![_[:alnum:]\\:])"
                },
                {
                    "name": "keyword.operator.expression.defined.kos",
                    "match": "(defined)(?![_[:alnum:]\\:])"
                },
                {
                    "name": "keyword.operator.expression.on.kos",
                    "match": "(on)(?![_[:alnum:]\\:])"
                },
                {
                    "name": "keyword.operator.expression.off.kos",
                    "match": "(off)(?![_[:alnum:]\\:])"
                },
                {
                    "name": "keyword.operator.power.kos",
                    "match": "\\^"
                },
                {
                    "name": "keyword.operator.comparison.kos",
                    "match": "<>|="
                },
                {
                    "name": "keyword.operator.relational.kos",
                    "match": "<=|>=|<|>"
                },
                {
                    "name": "keyword.operator.arithmetic.kos",
                    "match": "\\*|/|-|\\+"
                }
            ]
        },
        "suffix": {
            "patterns": [{
                    "include": "#function-call"
                },
                {
                    "include": "#delegate"
                },
                {
                    "include": "#atom"
                },
                {
                    "include": "#array-index"
                },
                {
                    "include": "#array-brackets"
                }
            ]
        },
        "array-index": {
            "match": "(\\#)([0-9]+|([_[:alpha:]][_[:alnum:]]*)(?![_[:alnum:]\\:]))",
            "captures": {
                "1": {
                    "name": "meta.pound.kos"
                },
                "2": {
                    "name": "variable.parameter.kos"
                }
            }
        },
        "array-brackets": {
            "begin": "\\[",
            "beingCaptures": {
                "1": {
                    "name": "meta.brace.square.kos"
                }
            },
            "end": "\\]",
            "endCaptures": {
                "1": {
                    "name": "meta.brace.square.kos"
                }
            },
            "patterns": [{
                "include": "#expression"
            }]
        },
        "function-call": {
            "name": "meta.functioncall.kos",
            "begin": "(\\:)?([_[:alpha:]][_[:alnum:]]*)\\s*(\\()",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.accessor.block.kos"
                },
                "2": {
                    "name": "entity.name.function.kos"
                },
                "3": {
                    "name": "meta.brace.round.kos"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "1": {
                    "name": "meta.brace.round.kos"
                }
            },
            "patterns": [{
                "include": "#arguments"
            }]
        },
        "delegate": {
            "name": "meta.delegate.kos",
            "match": "(\\:)?([_[:alpha:]][_[:alnum:]]*)\\s*(\\@)",
            "captures": {
                "1": {
                    "name": "punctuation.accessor.block.kos"
                },
                "2": {
                    "name": "entity.name.function.kos"
                },
                "3": {
                    "name": "meta.atSign.kos"
                }
            }
        },
        "call": {
            "name": "meta.call.kos",
            "begin": "\\(",
            "beginCaptures": {
                "1": {
                    "name": "meta.brace.round.kos"
                }
            },
            "end": "\\)",
            "endCaptures": {
                "1": {
                    "name": "meta.brace.round.kos"
                }
            },
            "patterns": [{
                "include": "#arguments"
            }]
        },
        "arguments": {
            "patterns": [{
                    "include": "#punctuation-comma"
                },
                {
                    "include": "#expression"
                }
            ]
        },
        "atom": {
            "patterns": [{
                    "include": "#literal"
                },
                {
                    "include": "#file-identiifer"
                },
                {
                    "include": "#identifier"
                },
                {
                    "include": "#identifier-trailer"
                },
                {
                    "include": "#grouping"
                }
            ]
        },
        "identifier": {
            "name": "variable.other.identifier.kos",
            "match": "\\b([_[:alpha:]][_[:alnum:]]*)"
        },
        "identifier-trailer": {
            "name": "variable.other.trailer.kos",
            "match": "(\\:)([_[:alpha:]][_[:alnum:]]*)(?=(:|\\s))",
            "captures": {
                "1": {
                    "name": "punctuation.accessor.block.kos"
                },
                "2": {
                    "name": "variable.other.trailer"
                }
            }
        },
        "file-identifier": {
            "name": "variable.other.fileIdentifier.kos",
            "match": "\\b([_[:alpha:]][_[:alnum:]]*(?:\\.[_[:alpha:]][_[:alnum:]]*)+)"
        },
        "grouping": {
            "begin": "\\(",
            "end": "\\)",
            "patterns": [{
                "include": "#expression"
            }]
        },
        "comment": {
            "name": "comment.line.double-slash.kos",
            "begin": "(^[ \\t]+)?(//)",
            "beginCaptures": {
                "1": {
                    "name": "punctuation.whitespace.comment.leading.js"
                },
                "2": {
                    "name": "comment.line.double-slash.kos"
                }
            },
            "contentName": "comment.line.comment.kos",
            "end": "\\n"
        },
        "string": {
            "name": "string.kos",
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.kos"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.kos"
                }
            }
        },
        "literal": {
            "patterns": [{
                    "include": "#numeric-literal"
                },
                {
                    "include": "#string"
                },
                {
                    "name": "constant.language.true.kos",
                    "match": "\\btrue(?![_[:alnum:]\\:])"
                },
                {
                    "name": "constant.language.false.kos",
                    "match": "\\bfalse(?![_[:alnum:]\\:])"
                }
            ]
        },
        "to-from-operators": {
            "patterns": [{
                "name": "keyword.command.direction.kos",
                "match": "(?i)(?<![_[:alnum:]\\:])(to|from)(?![_[:alnum:]\\:])"
            }]
        },
        "from-operator": {
            "patterns": [{
                "name": "keyword.command.from.kos",
                "match": "(?i)(?<![_[:alnum:]\\:])(from)(?![_[:alnum:]\\:])"
            }]
        },
        "to-operator": {
            "patterns": [{
                "name": "keyword.command.to.kos",
                "match": "(?i)(?<![_[:alnum:]\\:])(to)(?![_[:alnum:]\\:])"
            }]
        },
        "white-space": {
            "name": "punctuation.separator.whitespace.kos",
            "match": "\\s"
        },
        "numeric-literal": {
            "name": "constant.numeric.number.kos",
            "match": "-?(?:0|[1-9](?:[0-9_]*[0-9])?)(?:\\.[0-9](?:[0-9_]*[0-9])?)?(?:[eE][+\\-]?[0-9](?:[0-9_]*[0-9])?)?"
        },
        "punctuation-comma": {
            "name": "punctuation.separator.comma.kos",
            "match": "\\,"
        },
        "punctuation-period": {
            "name": "punctuation.terminator.statement.kos",
            "match": "\\."
        }
    }
}