{
    "version": "",
    "name": "Kerbal Operating System",
    "scopeName": "source.kos",
    "patterns": [
        {
            "include": "#statements"
        }
    ],
	"repository": {
		"statements": {
			"patterns": [
                {
                    "include": "#directive"
                },
				{
					"include": "#instruction"
                },
                {
                    "include": "#declaration"
                },
                {
                    "include": "#comment"
                },
                {
                    "include": "#control-statement"
                }
			]
        },
        "directive": {
            "patterns": [
                {
                    "match": "(?i)(\\@)(lazyglobal)\\s+\\b(on|off)\\s*\\.",
                    "captures": {
                        "1": {
                            "name": "punctuation.initiator.directive.kos"
                        },
                        "2": {
                            "name": "keyword.directive.lazyGlobal.kos"
                        },
                        "3": {
                            "name": "keyword.control.lazyGlobal.kos"
                        },
                        "4": {
                            "name": "punctuation.terminator.statement.kos"
                        }
                    }
                }
            ]
        },
        "declaration": {
            "patterns": [
                {
                    "include": "#function-declaration"
                },
                {
                    "include": "#parameter-declaration"
                },
                {
                    "include": "#lock-declaration"
                },
                {
                    "include": "#variable-declaration"
                }
            ]
        },
        "function-declaration": {
			"name": "meta.function.kos",
			"begin": "(?i)(?:(\\bdeclare)\\s+)?(?:\\b(local|global)\\s+)?\\b(function)\\s+([_[:alpha:]][_[:alnum:]]*)",
			"beginCaptures": {
				"1": {
					"name": "keyword.declaration.declare.kos"
				},
				"2": {
					"name": "storage.modifier.scope.kos"
				},
				"3": {
					"name": "storage.type.function.kos"
                },
                "4": {
                    "name": "meta.definition.function.kos entity.name.function.kos"
                }
            },
			"end": "(?<=\\})",
            "patterns": [
				{
					"include": "#block"
				}
			]
        },
        "parameter-declaration": {
            "begin": "(?i)(?:(\\bdeclare)\\s+)?(?:\\b(local|global)\\s+)?\\b(parameter)\\s+",
            "beginCaptures": {
				"1": {
					"name": "keyword.declaration.declare.kos"
				},
				"2": {
					"name": "storage.modifier.scope.kos"
				},
				"3": {
					"name": "keyword.declaration.parameter.kos"
                }
            },
            "end": "\\.",
            "patterns": [
				{
					"include": "#parameter-body"
                },
                {
                    "#include": "#punctuation-comma"
                }
			]
        },
        "parameter-body": {
            "begin": "(?i)\\b([_[:alpha:]][_[:alnum:]]*)(?:\\s+\\b(is|to)\\s+)?",
            "beginCaptures": {
                "1": {
                    "name": "variable.parameter.kos"
                },
                "2": {
                    "name": "keyword.assignment.assign.kos"
                }
            },
            "end": "(?=(\\,|\\.))",
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "lock-declaration": {
            "begin": "(?i)(?:(\\bdeclare)\\s+)?(?:\\b(local|global)\\s+)?(\\block)\\s+\\b([_[:alpha:]][_[:alnum:]]*)\\s+(\\bto)\\s+",
            "beginCaptures": {
				"1": {
					"name": "keyword.declaration.declare.kos"
				},
				"2": {
					"name": "storage.modifier.scope.kos"
				},
				"3": {
					"name": "keyword.declaration.lock.kos"
                },
                "4": {
                    "name": "variable.other.kos"
                },
                "5": {
                    "name": "keyword.assignment.assign.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "0": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "variable-declaration": {
            "patterns": [
                {
                    "include": "#variable-declaration-declare"
                },
                {
                    "include": "#variable-declaration-scope"
                }
            ]
        },
        "variable-declaration-declare": {
            "begin": "\\b(declare)\\s+(\\b(local|global)\\s+)?\\b([_[:alpha:]][_[:alnum:]]*)\\s+\\b(is|to)\\s+",
            "beginCaptures": {
				"1": {
					"name": "keyword.declaration.declare.kos"
				},
				"2": {
					"name": "storage.modifier.scope.kos"
				},
				"3": {
					"name": "variable.other.kos"
                },
                "4": {
                    "name": "keyword.assignment.assign.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                }
            ] 
        },
        "variable-declaration-scope": {
            "begin": "\\b(local|global)\\s+\\b([_[:alpha:]][_[:alnum:]]*)\\s+\\b(to|is)\\s+",
            "beginCaptures": {
				"1": {
					"name": "storage.modifier.scope.kos"
				},
				"2": {
					"name": "variable.other.kos"
                },
                "3": {
                    "name": "keyword.assignment.assign.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                }
            ] 
        },
		"block": {
			"name": "meta.block.kos",
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.block.kos"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.block.kos"
				}
			},
			"patterns": [
				{
					"include": "#statements"
				}
			]
        },
        "control-statement": {
            "patterns": [
                {
                    "name": "keyword.control.conditional.kos",
					"match": "(?i)(?<![_[:alnum:]\\:])(else|if)(?![_[:alnum:]\\:])"
                },
                {
                    "name": "keyword.control.trigger.kos",
                    "match": "(?i)(?<![_[:alnum:]\\:])(when|then|on)(?![_[:alnum:]\\:])"
                },
                {
                    "match": "(?i)(?<![_[:alnum:]\\:])(preserve)(\\.)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.trigger.kos"
                        },
                        "2": {
                            "name": "punctuation.terminator.statement.kos"
                        }
                    }
                },
                {
                    "name": "keyword.control.flow.kos",
                    "match": "(?i)(?<![_[:alnum:]\\:])(until)(?![_[:alnum:]\\:])"
                },
                {
                    "name": "keyword.control.loop.kos",
                    "match": "(?i)(?<![_[:alnum:]\\:])(for|in|from|step|do)(?![_[:alnum:]\\:])"
                },
                {
                    "match": "(?i)(?<![_[:alnum:]\\:])(break)(\\.)",
                    "captures": {
                        "1": {
                            "name": "keyword.control.loop.kos"
                        },
                        "2": {
                            "name": "punctuation.terminator.statement.kos"
                        }
                    }
                },
                {
                    "include": "#return-statement"
                },
                {
                    "include": "#toggle-statement"
                },
                {
                    "include": "#wait-statement"
                }
            ]
        },
        "return-statement": {
            "begin": "(?i)(?<![_[:alnum:]\\:])(return)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.flow.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "toggle-statement": {
            "begin": "(?<![_[:alnum:]\\:])(?i)(toggle)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.toggle.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [
                {
                    "include": "#suffix"
                }
            ]
        },
        "wait-statement": {
            "begin": "(?i)(?<![_[:alnum:]\\:])(wait)\\s+(\\b(wait)\\s)?",
            "beginCaptures": {
                "1": {
                    "name": "keyword.control.wait.kos"
                },
                "2": {
                    "name": "keyword.control.wait.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "instruction": {
            "patterns": [
                {
                    "include": "#set-instruction"
                },
                {
                    "include": "#unassign-instruction"
                },
                {
                    "include": "#print-instruction"
                },
                {
                    "include": "#copy-instruction"
                },
                {
                    "include": "#switch-instruction"
                },
                {
                    "include": "#expression"
                },
                {
                    "include": "#block"
                }
            ]
        },
        "set-instruction": {
            "name": "meta.assignment.kos",
            "begin": "(?i)\\b(set)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.assignment.set.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [
                {
                    "includes": "#expression"
                }, 
                {
                    "includes": "#assignment-operators"
                }
            ]
        },
        "unassign-instruction": {
            "name": "meta.unassignment.kos",
            "begin": "(?i)\\b(unset|unlock)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.assignment.unassign.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [
                {
                    "includes": "#identifier"
                },
                {
                    "name": "keyword.other.unassign.all.kos",
                    "matches": "(?i)\\ball"
                }
            ]
        },
        "print-instruction": {
            "name": "meta.print.kos",
            "begin": "(?i)\\b(print)(?![_[:alnum:]\\:])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.print.kos"
                }
            },
            "end": "\\.",
            "endCaptures": {
                "1": {
                    "name": "punctuation.terminator.statement.kos"
                }
            },
            "patterns": [
                {
                    "include": "#expression"
                },
                {
                    "include": "#print-at-expression"
                }
            ]
        },
        "print-at-expression": {
            "begin": "(?i)\\b(at)\\s*\\(",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.at.kos"
                }
            },
            "end": "\\)",
            "patterns": [
                {
                    "include": "#punctuation-comma"
                },
                {
                    "include": "#expression"
                }
            ]
        },
        "copy-instruction": {
            "name": "meta.copy.kos",
            "begin": "(?i)\\b(copy)(?![_[:alnum:]\\:])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.copy.kos"
                }
            },
            "end": "\\.",
            "patterns": [
                {
                    "include": "#expression"
                },
                {
                    "include": "#copy-operators"
                }
            ]
        },
        "switch-instruction": {
            "name": "meta.switch.kos",
            "begin": "(?i)\\b(switch)\\s+\\b(to)(?![_[:alnum:]\\:])",
            "beginCaptures": {
                "1": {
                    "name": "keyword.command.switch.kos"
                },
                "2": {
                    "name": "keyword.command.switchTo.kos"
                }
            },
            "end": "\\.",
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "expression": {
            "patterns": [
                {
					"include": "#expressions-without-identifiers"
				},
				{
					"include": "#atom"
                },
                {
                    "include": "#white-space"
                }
            ]
        },
        "expressions-without-identifiers": {
            "patterns": [
                {
					"include": "#comment"
                },
                {
                    "include": "#function-call"
                },
                {
                    "include": "#block"
                },
                {
                    "include": "#expression-operators"
                }
            ]
        },
        "expression-operators": {
            "patterns": [
                {
                    "name": "keyword.operator.expression.or.kos",
                    "match": "or"
                },
                {
                    "name": "keyword.operator.expression.and.kos",
                    "match": "and"
                },
                {
                    "name": "keyword.operator.expression.not.kos",
                    "match": "not"
                },
                {
                    "name": "keyword.operator.comparison.kos",
                    "match": "<>|="
                },
                {
                    "name": "keyword.operator.relational.kos",
                    "match": "<=|>=|<|>"
                },
                {
                    "name": "keyword.operator.arithmetic.kos",
                    "match": "\\*|/|-|\\+"
                }
            ]
        },
        "atom": {
            "patterns": [
                {
                    "include": "#literal"
                },
                {
                    "include": "#grouping"
                },
                {
                    "name": "variable.other.fileIdentifier.kos",
                    "match": "\\b([_[:alpha:]][_[:alnum:]]*(?:\\.[_[:alpha:]][_[:alnum:]]*)+)"
                }
            ]
        },
        "grouping": {
            "begin": "\\(",
            "end": "\\)",
            "patterns": [
                {
                    "include": "#expression"
                }
            ]
        },
        "comment": {
            "name": "comment.line.double-slash.kos",
            "begin": "(//)",
            "beginCaptures": {
                "0": {
                    "name": "comment.line.double-slash.kos"
                }
            },
            "contentName": "comment.line.comment.kos",
            "end": "\\n"
        },
        "string": {
            "name": "string.kos",
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.kos"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.kos"
                }
            }
        },
        "literal": {
            "patterns": [
                {
                    "include": "#numeric-literal"
                },
                {
					"include": "#string"
                },
                {
                    "name": "constant.language.true.kos",
                    "match": "\\btrue"
                },
                {
                    "name": "constant.language.false.kos",
                    "match": "\\bfalse"
                }
            ]
        },
        "assignment-operators": {
            "patterns": [
                {
                    "name": "keyword.assignment.assign.kos",
                    "match": "(?i)(?<![_[:alnum:]\\:])(to|is)(?![_[:alnum:]\\:])"
                }
            ]
        },
        "copy-operators": {
            "patterns": [
                {
                    "name": "keyword.command.copy.direction.kos",
                    "match": "(?i)(?<![_[:alnum:]\\:])(to|copy)(?![_[:alnum:]\\:])"
                }
            ]
        },
        "white-space": {
            "name": "punctuation.separator.whitespace.kos",
            "match": "\\s"
        },
        "numeric-literal": {
            "name": "constant.numeric.number.kos",
            "match": "-?(?:0|[1-9](?:[0-9_]*[0-9])?)(?:\\.[0-9](?:[0-9_]*[0-9])?)?(?:[eE][+\\-]?[0-9](?:[0-9_]*[0-9])?)?"
        },
        "punctuation-comma": {
			"name": "punctuation.separator.comma.kos",
			"match": "\\,"
		},
		"punctuation-period": {
			"name": "punctuation.terminator.statement.kos",
			"match": "\\."
		}
	}
}