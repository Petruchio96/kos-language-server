to do:

update
make PreformBurn chapter
make AscenDescenFinder chapter

helpful sites:
  -braeunig
  -nasa handbook

Let's first look at the functions, here's the list of all current functions in
the rend_functions file:

 Preset
 CopyFiles
 RCSThrottle

 SteeringOrbitRet
 SteeringOrbitPro
 SteeringTargetNorm
 SteeringTargetAntNorm

 DeltaVCalc
 EndDeltaV
 TimeTillManeuverBurn

 TaAtTime
 ETAToTa
 TimePeToTa

 RelativeAngle

--------------------------------------------------------------------------------

- Preset -
This function sets all engines and rcs to 100% of the thrust limit and resets the
sas, it also sets the 'manual' manual throttle to 0% and unlocks the steering.

- CopyFiles -
Requires a list of files which need to be copied and the 'main path' of those files.
It copies said files.

- RCSThrottle -
Set all RCS thruster blocks (!) to a certain value.

--------------------------------------------------------------------------------

- SteeringOrbitRet -
Locks steering to orbital retrograde (negative orbital velocity), waits till the
facing vector and retrograde vector are less than two degrees apart and waits 5
seconds to see if the same is still true. If it isn't it means that the ship is
still trying to find the vector.

- SteeringOrbitPro -
Locks steering to orbital prograde (positive orbital velocity), waits till the
facing vector and prograde vector are less than two degrees apart and waits 5
seconds to see if the same is still true. If it isn't it means that the ship is
still trying to find the vector.


- SteeringTargetNorm -
Locks steering to the normal vector relative of a target (crossproduct of the ship's
position - the body's position (since the origin is the vessel and not the body)
and the ship's orbital velocity) although this is only true when the inclination
is less than 180 degrees. If the inclination is more than 180 degrees the following
will give the normal vector: the crossproduct of the target's position - the body's
position and the ship's orbital velocity).
It also waits till the facing vector and normal vector are less than two degrees
apart and waits 5 seconds to see if the same is still true. If it isn't it means
that the ship is still trying to find the vector.

- SteeringTargetAnNorm -
Locks steering to the antinormal vector relative of a target (crossproduct of the
target's position - the body's position (since the origin is the vessel and not
the body) and the target's orbital velocity) although this is only true when the
inclination is less than 180 degrees. If the inclination is more than 180 degrees
the following will give the antinormal vector: the crossproduct of the ship's position
- the body's position and the ship's orbital velocity).
It also waits till the facing vector and antinormal vector are less than two degrees
apart and waits 5 seconds to see if the same is still true. If it isn't it means
that the ship is still trying to find the vector.

--------------------------------------------------------------------------------

- DeltaVCalc -
Calculates the current speed and the speed with the target parameters. Then it
subtracts the final deltav with the current deltav which gets you the deltav needed.
If the deltav needed for the burn is negative this means that a retrograde burn
needs to be preformed, a negative check gets activated. After that the absolute
value of the deltav gets taken.

- EndDeltaV -
The absolute value of the deltav gets subtracted from the current deltav (the rocket
equation) and you'll end up with your final deltav.

- TimeTillManeuverBurn -
Looks at when you want to preform the burn (e.g. apoapsis) and subtracts half of
the burn time from the time till the target time.
The burn time gets calculated by taking the deltav needed for the burn and dividing
it by the average of the pre-burn max acceleration of the ship and the post-burn
max acceleration of the ship .
The pre-burn max acceleration of the of the ship can be found by taking the
maxthrust and dividing it by the mass.
Calculating the post-burn max acceleration is bit more tricky because you need to
find the post-burn mass of the ship. The post-burn mass of the ship can be found
by using the Tsiolkovsky rocket equation.

--------------------------------------------------------------------------------

- TaAtTime -
Finds the true anomaly at a given time of a given vessel. Uses a derivative of
the 'Radius from true anomaly' formula. Also looks at the vector dot product of
the position vector (imgur.com/Nz9N088) at the given time and the velocity vector
at the given time. If this is negative the true anomaly is 360 - calculated true
anomaly, if the dot product is positive the calculated true anomaly is correct.

- ETAToTa -
Uses TaAtTime, if no start time is declared the default is time:seconds, resulting
in the current true anomaly. If a start time is declared it will calculate in how
much time it'll take for the given vessel to go from the start time to a certain
true anomaly (since orbits arent 100% circular the calculated start time's true
anomaly does NOT equal to current true anomaly + (delta true anomaly)/true anomaly
per second).
Then it calculates the estimated time of arrival at the periapsis using the TimePeToTa
function. If the time to periapsis from the target true anomaly - the time to periapsis
from the given time's true anomaly is negative it means you already passed this point
and need to add the orbital period of given vessel to the time.
Now you have the time it'll take to go from the true anomaly at the given time to
the target true anomaly of the given vessel.

- TimePeToTa -
Calculates the time till periapsis by calculating the eccentric anomaly and the
mean anomaly of the given vessel. Also calculates the mean motion.
Since the periapsis has a true anomaly of 0, the eccentric anomaly is 0 and so is
the mean anomaly. Now you can easily calculated the time till periapsis.

--------------------------------------------------------------------------------

- RelativeAngle -
Calculates the angle between two objects. If theta is 0 it means that inclination
and the longitude of the ascending node of the two objects are the same and in
the same orbital plane.

- AscenDescenFinder -
NormalVector1 looks at the normal vector, NormalVector2 at the anti normal vector.
The cross product of both vectors give the descending node vector (both are on
the same plane). If the dot product of the descending node vector and the prograde
vector is less than 0 the descending node's true anomaly is: current true anomaly
+ the angle between the descending node vector and the vector from the body's center
to the ship. If the dot product of the descending node vector and the prograde
vector is more than 0 the text above is still true except the + gets replaced by
a -.
Then if the true anomaly of the descending node is less than 0, 360 gets added.
Since the ascending node is 180 degrees away from the descending node, we can add
180 to the descending node. If the result is over 360 degrees subtract 360.
